
In esupport landing page there we can see the search bar, entering any keyword would fetch us results and take us to sitesearch landing page
url - https://www.att.com/global-search/search?q=how+do+i+pay
Landing page will display promotions, faq cards, solution article - also different category will be displayed 
support    	shop 		myAT&T account(requires sign in) 				ATT News - on selection of any article from the below category will take us to respective km article or elated service

view all support category results will give us support category / service category page

For help with your wireless device, filter results. - will navigate to device how to where u can select device and see the related results
on selecting make and model will give us selected device on search category page , with remove & change device option - And the related articles will be displayed

Filters - (products filter) prepaid mail homephone internet wireless tv 
		(content type filter) community forums /faqs / legal /support articles/videos/ user guides
		
		
Data from - 
config/*.json

config.json

{

  "consumerServerInfo": {
    "nodeServer": "http://tst08.stage.att.com",
    "appServer": "/user-search?",
    "desktop": {
      "promoUrl":"/search/v1/promotions?app-id=sitesearch&start=0&rows=5&wt=json",
      "solrUrl": "/search/v1/global-search?app-id=sitesearch&defType=edismax&echoParams=NONE&tags=DESKTOP&fl=isIRUSpecificPriceExists"
	  "relatedURL":"/search/v1/auto-suggest?app-id=sitesearch&echoParams=NONE&start=0&rows=60&fl=relatedQuery,searchQuery&wt=json",
      "topServiceURL":"/search/v1/global-search?app-id=sitesearch&echoParams=NONE&start=0&rows=1&addTopService=true&wt=json&fl=id",
      "spellCheckUrl":"/search/v1/global-search?app-id=sitesearch&echoParams=NONE&start=0&rows=0&facet=false&wt=json&echoParams=none&spellcheck=true&user=admin&role=DEFAULT&hl=false&fq=zipCode:All+OR+state:All&fq=hideResult:false",
      "solrFaqUrl": "/search/v1/faq?app-id=sitesearch&ps=4&defType=edismax&&fl=id,faqcta,faqEyebrowText,articleId,service,frontEndService,navigationTree,SMBnavigationTree,question,answer,score,serviceMapping&qf=question_normalized^150 articletitle_normalized^10&pf=question&pf2=question&pf3=question&qs=4&wt=json&tie=0.5&fq=custType:consumer"
    },
   }
}

in here the parameters come from fusion or backend like fl=DestinationURL,deviceType,imageUrl,cqid,manufacturer,Category

routes.js

import App from './containers/App';
import Home from './containers/Home';
import About from './containers/About';
import Group from './containers/Group';
var routes = {
    path: '/',
    component: App,
    indexRoute: {component: Home},
    childRoutes: [
        {path: 'about', component: About},
        {path: 'home', component: Home},
        {path: 'global-search/search', component: Group},
        {path: 'global-search/smbsearch', component: Group},
        {path: 'mobilesearch/search-results.html', component: Group}

    ]
};

module.exports = routes;

views - search.ejs


Server - 

//server.js normal 
const app = new Express();
app.get()


app.listen(port, (error) => {
	if (error) {
        console.error(error);
    } else {
			 initProps('config.json');
		}

//routehandler.js
import async from 'async';

import {RouterContext, match} from 'react-router';

var express = require('express');
var router = express.Router();


router.get('*global-search/*search*', function (req, res, next) {

		 var params = req.query;
		 
		 const history = createHistory();
    const reduxRouterMiddleware = syncHistory(history);
    // Create a new Redux store instance
    const store = configureStore({}, reduxRouterMiddleware);
    var cookies = require('cookie');
    const referrer = req.headers.referer;

	//A match object contains information about how a <Route path> matched the URL. 
	
	match(
        {routes: routes, location: req.originalUrl},
        (error, redirectLocation, renderProps) => {
		
		 let requestURL = req.originalUrl;
                let customerType = 'consumer';
			
			//check from url for smb and if true put customerType = 'smb';
			
				let requestURL = req.originalUrl;
				
			 const component = (< Provider store={store}>
                                            < RouterContext {...renderProps}/>
                                        </Provider >
                                    );

			if ( isNotEmpty(store.getState().results.data.response)) {
                                        resultCategory = params.catField;
                                        if (isNotEmpty(params.secFilter)) {
                                            resultFilters = params.secFilter;
                                        }
			}
			
			if (!isNotEmpty(store.getState().authenticate.data.checkRedirection) || (store.getState().authenticate.data.checkRedirection !== "true")) {
                                   
								   const html = renderToString(component);
                                   
                                    let initialState = store.getState();
                                    
                                    let title = '';
                                    let description = '';
                                    
                                    
                                    
                                        if (params.q != null) {
                                            title = "Results for " + qValue + " - AT&T Small Business Search";
                                        } 

                                    
                                    let isAuthenticated = 'N';
                                    if (store.getState().authenticate.data.authenticated === true) {
                                        isAuthenticated = 'Y';
                                    }
                                    
                                    let correctedValue = '';
                                  
                                    if (isNotEmpty(params.q) && isNotEmpty(store.getState().group.queryValue) && params.q.toString().trim() !== store.getState().group.queryValue.toString().trim()) {
                                        if (isNotEmpty(store.getState().spellCheck) && isNotEmpty(store.getState().spellCheck.data) && isNotEmpty(store.getState().spellCheck.data.spellcheck)) {
                                            correctedValue = store.getState().spellCheck.data.spellcheck.collations.collation;
                                        }
                                    }
                                   
                                    initialState = serialize(initialState, {isJSON: true});
                                    if (!res.headersSent) {
                                        res.status(200).render('search', {
                                            html: html,   //this html and all other parameters is populated in search.ejs
                                            initialState: initialState,
                                            title: title.replace("sdfdfdfdfgeg", ""),                                        
                                            requestURL: sanitizeUrl(requestURL),
                                            customerType: customerType,
                                            isAuthenticated: isAuthenticated,
                                            resultCategory: resultCategory
                                           
                                        });
                                    }
                                }
                            })
                        }
                    ], function (err, result) {
                        // result now equals 'done'
                    });

		module.exports = router;

//clientDispatcher.js

here we had config.json initialized in server.js and we need to fetch the data

import {setData} from '../actions/actionCreators';

function fetchData(start, q, filter, heading, location) {
    q = sanitizeUrl(q);
    return (dispatch, getState) => {
        async.waterfall([
            function (callback) {
			
					const config = returnProps('config.json');
                    apiUrl = config.consumerServerInfo.nodeServer;
					 let urlPath = '/global-search/query/?rows=';
					let filterQuery = '';
                
                if (isNotEmpty(filter['filterCall'])) {
                    filterQuery = returnFiltQuery(filter);
                }
				
				let sortByPrice = '';
                if (isNotEmpty(filter['sortByPrice'])) {
                    sortByPrice = '&sortByPrice=' + filter['sortByPrice'];
                }
					
				let url = apiUrl + urlPath + rows + '&start=' + start + '&q=' + encodeURIComponent(q) + sortByPrice +  filterQuery + '&smb=' + smbFlag + dsm + srchorigin;
               
                if (isNotEmpty(filter) && isNotEmpty(heading)) {
                    url = url + '&catField=' + encodeURIComponent(heading);
                }
				
			 returnData('fetchData', url, function (data, status) {
                    
                        if (smbFlag !== 'true') {
							const mainCat = getState().categories.category.categories;
                            let catMapping = getState().categories.category.catMapping;
                            
                            if (isNotEmpty(location.query.catField) && location.query.catField.toString().toLowerCase() === 'support') {
                                catMapping.Support = data.subfilter.dynamicFilters;
                            }

                            dispatch(setCategories({
                                categories: mainCat,
                                catMapping: catMapping
                            }, getState().categories.deviceType, ''));
                        }
                        dispatch(setData(data.result, data.subfilter, q, heading, data.pagination));
                        
                            }
                        }
                    }
                    callback(null, data, dispatch);

                }, {
                    method: 'GET',
                    credentials: 'same-origin'
                });
            }

			//this returndata function is inn helper.js
			
	function returnData(url, callback, options) {
		return fetch(url, options)
        .then(function (res) {
            return res.json();
        }).then(function (json) {
            console.timeEnd(labelWithTime);
            callback(json, 'results');
        }, function (err) {
            callback(err, 'error');
        });
}

containers - App, Home, About, Group

//App.js

export default class App extends React.Component {
    render() {
        return (
            <div>
                <section>
                    {this.props.children}
                </section>
            </div>
        );
    }
} 

//Group.js

import Group from "../components/GroupedResults";
import Results from "../components/CategoryMainView";

@connect(
    state => ({
        results: state.results,
        auth: state.authenticate,
        jsonFileData: state.jsonFileData,
    })
)

				
export default class  extends React.Component {

	render() {
			  return (
				 <div id="testData">
                    {  <Results{ ...this.props }/>}
                </div> );
			}
			}


Components -  legal, shopfilter, supportfilter, GroupedResults, CategoryMainView

CategoryLeftNav   supportFilters   SundaySkyView PromotionGroupView  FaqView DeviceSelectionFilter   CategoryMiddleView CategoryMoreOptionsView
All these components are called in CategoryMainView
//CategoryMainView.js

class Results extends React.Component {
 render() {
			const results = this.props.results;
			const categoryVal = this.props.location.query.catField;
			const q = this.props.location.query.q;
	return (

						<CategoryFilterGroups /> //CategoryLeftNav & supportFilters are rendered inside it
                              <SundaySkyView />
                              <PromotionGroupView/>
							  <FaqView/> 
                            {userTypeConsumer ? <DeviceSelectionFilter { ...this.props } />: ''}
                            <CategoryMiddleView { ...this.props }/>
                            <CategoryMoreOptionsView/>
                        

			 </div>
        );
    }
}

Results.propTypes = {
    location: React.PropTypes.object.isRequired,
    results: React.PropTypes.object.isRequired,
    dispatch: React.PropTypes.func.isRequired
};

export default Results;
//CategoryMiddleView

   render() {
   
   const {results} = this.props;
   const docs = results.data.response.docs;
                values = docs.map(function (item, i) {
									return <li key={i}>
								{catField === 'Shop' ?	<ShopListView { ...item }  isAuthenticated={isAuthenticated} location ={location} /> :
								catField === 'Support' ? <SupportListView { ...item } isAuthenticated={isAuthenticated} location ={location} />
											: <CorpInformationListView { ...item }  isAuthenticated={isAuthenticated} location ={location} />
											</li>
									});
					

		return (
				<div className="container inner-container-filter">
                            <ul className="support-list">
                                {values}
                            </ul>
                        </div>
			);}
		}


//configureStore.js
	
import {createStore, applyMiddleware, compose} from 'redux';
import thunk from 'redux-thunk';
	
export default function configureStore(initialState, reduxRouterMiddleware) {

	 const createStoreWithMiddleware = applyMiddleware(thunk,promise,reduxRouterMiddleware)(createStore);
	  store = createStoreWithMiddleware(rootReducer, initialState, compose());
	  
	  if (module.hot) {
        // Enable Webpack hot module replacement for reducers
        module.hot.accept('../reducers', () => {
            const nextRootReducer = require('../reducers');
            store.replaceReducer(nextRootReducer)
        })
    }
    return store
}

//Reducer- The reducer is a pure function that takes the previous state and an action, and returns the next state. 

results.js

import {FETCH_DATA_START, FETCH_DATA_FULFILLED, FETCH_DATA_ERROR} from '../actions/actionCreators';

export default function results(state = {data: ''}, action) {
    switch (action.type) {
        case FETCH_DATA_START:
            state = {...state, fetching: true, fetched: false, name: action.payload, data: ''};
            break;
        case FETCH_DATA_FULFILLED:
            state = {
                ...state, fetched: true,
                fetching: false, data: action.payload.value, pagination: action.payload.pagination
            };
            break;
        case FETCH_DATA_ERROR:
            state = {
                ...state, fetched: false,
                fetching: false, data: action.payload.value
            };
            break;
        default:
            return state;
    }
    return state;
}

//actionCreators.js

export const FETCH_DATA_FULFILLED = 'FETCH_DATA_FULFILLED';

export function setData(payload, subFilter, q, filter, pagination) {
    return {
        type: FETCH_DATA_FULFILLED,
        payload: {
            subFilter: subFilter,
            value: payload,
            q: q,
            filter: filter,
            pagination: pagination
        }
    };
}

this action wil be dispatched in clientdispatcher.js

React Component Lifecycle uses

In CategoryMiddleView.js, 

componentWillMount(){
	  const cookieDetail = this.props.cookieDetails;
	  let fanId = JSON.parse(GNSESS).FANID;
	  let skuIds = fetchIRUResults(this.props.location.query.catField, this.props.results.data.response.docs);
	  this.props.dispatch(fetchIRU(skuIds.replace(/,$/g, ''), fanId));

}

//checks for iru authenticated price before the componenet is mounted

 showFilterOptions() {
	this.filterOptions.push(content); //pushes the selected filter in selected filteroption
                    }

componentDidMount() {
     if (!this.state.setFilter) {
            this.showFilterOptions();
            this.setState({ 'setFilter': true });
        }
    }

componentDidUpdate() {
        window.scrollTo(0, 0);
        this.showFilterOptions();
    }

shouldComponentUpdate() {
        const reload = this.props.location.query.reload;
        if (reload) {
            return false;
        }
        return true;
    }


//In categoryLeftnav.js  - as no update in comp in required
shouldComponentUpdate() {
  return false;
 }

 
 in phones.js
 
 componentWillMount(){
        this.props.dispatch(getIRUPrice());
    }
	
	

Use the compile function to change the original DOM (template element) before AngularJS creates an instance of it and before a scope is created.

While there can be multiple element instances, there is only one template element. The ng-repeat directive is a perfect example of such a scenario. That makes the compile function the perfect place to make changes to the DOM that should be applied to all instances later on, because it will only be run once and thus greatly enhances performance if you are stamping out a lot of instances.

on button click generate a new button

<html ng-app='APP'>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.1.5/angular.min.js"></script>

<div><collection></collection></div>
         

angular.module('APP', [])
.directive('collection', function () {
	return {
		restrict: "E",
		template: "<add></add>"
	}
})
.directive('add', function ($compile) {
	return {
		restrict: "E",
		template: "<button>click</button>",
		link: function (scope, element, attrs) {
			
		element.bind("click",function(){
        
        element.append("<div><collection></collection><div>"); 
				$compile(element.contents())(scope)
			
		})
	}
   }
});


$compile(element.contents())(scope);. As the html is appended manually we need to tell angular to re-render the directive.

HTML5

mproved support for embedding graphics, audio, and video content via the new <canvas>, <audio>, and <video> tags.
Extensions to the JavaScript API such as geolocation and drag-and-drop as well for storage and caching.
Introduction of “web workers”.
Several new semantic tags were also added to complement the structural logic of modern web applications. These include the <main>, <nav>, <article>, <section>, <header>, <footer>, and <aside> tags.
New form controls, such as <calendar>, <date>, <time>, <email>, <url>, and <search>.


- The <canvas> tag is used to draw graphics, on the fly, via scripting (usually JavaScript).
function draw() {
  var canvas = document.getElementById('canvas');
  if (canvas.getContext) {
    var ctx = canvas.getContext('2d');

    ctx.fillRect(25, 25, 100, 100);
    ctx.clearRect(45, 45, 60, 60);
    ctx.strokeRect(50, 50, 50, 50);
  }
}

The canvas is initially blank.To display something, a script first needs to access the rendering context and draw on it
The first line in the script retrieves the node in the DOM representing the <canvas> element by calling the document.getElementById() method. Once you have the element node, you can access the drawing context using its getContext() method.

SVG vs Canvas

SVG is a language for describing 2D graphics, but <canvas> allows you to draw 2D graphics on the fly using JavaScript.
SVG is XML-based, which means that every element is available within the SVG DOM. You can attach JavaScript event handlers for an element.
In SVG, each drawn shape is remembered as an object. If attributes of an SVG object are changed, the browser can automatically re-render the shape.
Canvas is rendered pixel by pixel. In canvas, once the graphic is drawn, it is forgotten by the browser. If its position should be changed, the entire scene needs to be redrawn, including any objects that might have been covered by the graphic.


<audio controls>
  <source src="horse.ogg" type="audio/ogg">
  <source src="horse.mp3" type="audio/mpeg">
</audio>

The Geolocation interface represents an object able to programmatically obtain the position of the device.
An object with this interface is obtained using the navigator.geolocation property implemented by the Navigator object.
The Geolocation.getCurrentPosition() method is used to get the current position of the device.

function success(pos) {
  var crd = pos.coords;

  console.log('Your current position is:');
  console.log(`Latitude : ${crd.latitude}`);
  console.log(`Longitude: ${crd.longitude}`);
  console.log(`More or less ${crd.accuracy} meters.`);
}

function error(err) {
  console.warn(`ERROR(${err.code}): ${err.message}`);
}

navigator.geolocation.getCurrentPosition(success, error, options);


id = navigator.geolocation.watchPosition(success[, error[, options]]); - The Geolocation method watchPosition() method is used to register a handler function that will be called automatically each time the position of the device changes
navigator.geolocation.clearWatch(id); - The ID number returned by the Geolocation.watchPosition() method when installing the handler you wish to remove.

Drag and Drop 

<script>
function allowDrop(ev) {
    ev.preventDefault();
}

function drag(ev) {
    ev.dataTransfer.setData("text", ev.target.id);
}

function drop(ev) {
    ev.preventDefault();
    var data = ev.dataTransfer.getData("text");
    ev.target.appendChild(document.getElementById(data));
}
</script>
</head>
<body>

<p>Drag the W3Schools image into the rectangle:</p>

<div id="div1" ondrop="drop(event)" ondragover="allowDrop(event)"></div>
<br>
<img id="drag1" src="img_logo.gif" draggable="true" ondragstart="drag(event)" width="336" height="69">

</body>
</html>

HTML web storage provides two objects for storing data on the client:

window.localStorage - stores data with no expiration date
window.sessionStorage - stores data for one session (data is lost when the browser tab is closed)

Web Workers makes it possible to run a javascript operation in a background thread separate from the main execution thread of a web application.
The advantage of this is that laborious processing can be performed in a separate thread, allowing the main (usually the UI) thread to run without being blocked/slowed down.
A worker is an object created using a constructor (e.g. Worker()) that runs a named JavaScript file — this file contains the code that will run in the worker thread; workers run in another global context that is different from the current window

This context is represented by either a DedicatedWorkerGlobalScope object (in the case of dedicated workers - workers that are utilized by a single script), or a SharedWorkerGlobalScope (in the case of shared workers - workers that are shared between multiple scripts).

The server-sent event API is contained in the EventSource interface; to open a connection to the server to begin receiving events from it, create a new EventSource object, specifying the URI of a script that generates the events. 
var evtSource = new EventSource("ssedemo.php");
Once you've instantiated your event source, you can begin listening for onmessage from the server by listening for the message event
evtSource.onmessage = function(e) {}

You can also listen for events, using addEventListener()
evtSource.close();

<section> can contain <article> elements, and an <article> can contain <section> elements.

The difference is that span gives the output with display: inline and div gives the output with display: block.

What’s one main result if you do not specify a doctype in an HTML page?
New HTML5-specific tags will not be interpreted by the browser.

- 
The CSS box model is a rectangular layout paradigm for HTML elements that consists of the following:

Content - The content of the box, where text and images appear
Padding - A transparent area surrounding the content (i.e., the amount of space between the border and the content)
Border - A border surrounding the padding (if any) and content
Margin - A transparent area surrounding the border (i.e., the amount of space between the border and any neighboring elements)
Each of these properties can be specified independently for each side of the element (i.e., top, right, bottom, left) or fewer values can be specified to apply to multiple sides

Combinators 

div, p - Selects all <div> elements and all <p> elements
Descendant selector  - 
div p - Selects all <p> elements that are anywhere inside a <div> element
Child selector - 
div > p - Selects all <p> elements where the immediate parent is a <div> element
Adjacent sibling selector - 
div + p - Selects all <p> elements that are placed immediately after a <div> element

<div>
  <code>Some code.</code>
  <p>Paragraph 2.</p>
</div>

<p>Paragraph 3.</p>
<p>Paragraph 4.</p>

//result p3 colored

General Sibling - 
div ~ p - Selects all <p> elements that are anywhere preceded by a <div> element

<div>
  <code>Some code.</code>
  <p>Paragraph 2.</p>
</div>

<p>Paragraph 3.</p>
<p>Paragraph 4.</p>

//result p3 p4 colored

Among these children, only one of them can be the first. This is matched by :first-child:
The difference between :first-child and :first-of-type is that :first-of-type will match the first element of its element type


<div class="parent">
  <h1>Child</h1>   <!-- h1:first-child, h1:first-of-type -->
  <div>Child</div> <!-- div:nth-child(2), div:first-of-type -->
  <div>Child</div>
  <div>Child</div>
</div>

nth-of-type(n) 
	Selects every  element that is the nth  element of its parent
	
	p:nth-of-type(2)	Selects every <p> element that is the second <p> element of its parent
	
:nth-child(n)	p:nth-child(2)	Selects every <p> element that is the second child of its parent


 Originally, CSS allowed the matching of elements by type, class, and/or ID. CSS2.1 added pseudo-elements, pseudo-classes, and combinators. 
 With CSS3, we can target almost any element on the page with a wide range of selectors.
 
 CSS3 expands upon those attribute selectors.Three more attribute selectors were added in CSS3; they allow for substring selection.
 
 - E[attr^=val] Matches any element E whose attribute attr starts with the value val.

eg.          a[href^='http://sales.']{
							color: teal;
							}
- E[attr$=val] Matches any element E whose attribute attr ends in val.

eg.          a[href$='.jsp']{
					color: purple;
					}
- E[attr*=val]  .Matches any element E whose attribute attr matches val anywhere within the attribute

eg.         img[src*='artwork']{
                    border-color: #C3B087 #FFF #FFF #C3B087;
                               }
							   
A few more pseudo-class selectors were added in CSS3. One is the :root selector, which allows designers to point to the root element of a document. In HTML, it would be <html>.
As a complement to the :first-child selector, the :last-child was added. With it one can select the last element named of a parent element.
A new user interaction pseudo-class selector was added, the :target selector. 

the :target selector highlight the current active HTML anchor

The negation pseudo-class selector, :not can be coupled with almost any other selector that has been implemented. 
The :not(selector) selector matches every element that is NOT the specified element/selector.
:not(p) {
    color: #ff0000;
}

Prior to CSS3, we almost always declared colours using the hexadecimal format (#FFF, or #FFFFFF for white). It was also possible to declare colours using the rgb() notation, providing either integers (0–255) or percentages.
 CSS3 also provides us with a number of other options: HSL, HSLA, and RGBA. The most notable change with these new color types is the ability to declare semitransparent colors.
 RGBA works just like RGB, except that it adds a fourth value: alpha, the opacity level or alpha transparency level. 1 means fully opaque, 0 is fully transparent,
 HSL stands for hue, saturation, and lightness. The a in hsla( ) here also functions the same way as in rgba( )
 CSS3 provides us with the opacity property. opacity sets the opaqueness of the element on which it’s declared, similar to alpha.
 
 Rounded Corners: border-radius
 The border-radius property defines the radius of the element's corners.
 
 Drop Shadows
CSS3 provides the ability to add drop shadows to elements using the box-shadow property.

Text Shadow
text-shadow adds shadows to individual characters in text nodes

CSS gradients let you display smooth transitions between two or more specified colors.

CSS defines two types of gradients:

Linear Gradients (goes down/up/left/right/diagonally)
Radial Gradients (defined by their center)

CSS transitions allows you to change property values smoothly (from one value to another), over a given duration.
div {
    width: 100px;
    height: 100px;
    background: red;
    -webkit-transition: width 2s; /* For Safari 3.1 to 6.0 */
    transition: width 2s;
}

div:hover {
    width: 300px;
}

Hover over the div element below, to see the transition effect

Media queries in CSS3 extended the CSS2 media types idea: Instead of looking for a type of device, they look at the capability of the device.

Media queries can be used to check many things, such as:

width and height of the viewport
width and height of the device
orientation (is the tablet/phone in landscape or portrait mode?)
resolution

In CSS3, there’s no need to include an element for every background image; it provides us with the ability to add more than one background image to any elemeny
background-image: url(img_flwr.gif), url(paper.gif);

The border-image property allows you to display custom designed borders around elements.

Before CSS3, designers could only use “web safe” fonts to be 100 percent sure that the fonts would always display the same on everyone’s machine. 
Designers can now run web fonts in CSS3, special fonts like those available via Google Fonts and Typecast. These fonts can either be downloaded onto a server and run through the CSS code, or accessed directly from its source via a script, which is called right within the CSS code
When you have found the font you wish to use, just include the font file on your web server, and it will be automatically downloaded to the user when needed.

In the @font-face rule; first define a name for the font (e.g. myFirstFont) and then point to the font file.
