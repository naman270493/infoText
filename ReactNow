client/index.js

import 'babel-polyfill';
import React from 'react';
import ReactDOM from 'react-dom';
import {Provider} from 'react-redux';
import history from '../common/history';
import debug from 'debug';
import configureStore from '../common/store/configureStore';
import {syncHistory} from 'redux-simple-router';
import {Router} from 'react-router-dom';
import Routes from '../common/routes';

const clientDebug = debug('app:client');
const rootElement = document.getElementById('app');
window.React = React; // For chrome dev tool support

const reduxRouterMiddleware = syncHistory(history);
const store = configureStore(window.__INITIAL_STATE__, reduxRouterMiddleware);
clientDebug('rehydrating app');
const isProduction = process.env.NODE_ENV === 'production';

ReactDOM.render(
    <Provider store={ store }>
        <Router history={history}>
            <Routes />
        </Router>
    </Provider>,
    rootElement
);

let component = (
    <Provider store={ store }>
        <Router history={history}>
            <Routes />
        </Router>
    </Provider>);


if (!isProduction) {
    const DevTools = require('../common/containers/DevTools').default;
    ReactDOM.render(
        <Provider store={store} key="provider">
            <div>
                {component}
                <DevTools />
            </div>
        </Provider>,
        rootElement
    );
}



//server.js

import Express from 'express';
import webpack from 'webpack';
import webpackDevMiddleware from 'webpack-dev-middleware';
import webpackHotMiddleware from 'webpack-hot-middleware';
import webpackConfig from '../webpack.config';
import {initProps} from '../common/helper/helper';
const cookieParser = require('cookie-parser');
const app = new Express();
const port = 3080;
const bodyParser = require('body-parser')
const sslRootCAs = require('ssl-root-cas')
sslRootCAs.inject()
const device = require('express-device');
const cors = require('cors');
const frameguard = require('frameguard');
const argv = require('yargs').argv;
import {isNotEmpty, returnProps} from '../common/helper/helper';
const os = require('os')
const ip = require("ip");
import dockerHostIp from 'docker-host-ip';
const bLog = require('../logger/logger').log;

app.use(function (req, res, next) {
    // Request methods you wish to allow
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST');
    // Request headers you wish to allow
    res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,content-type');
    // Set to true if you need the website to include cookies in the requests sent
    // to the API (e.g. in case you use sessions)
    res.setHeader('Access-Control-Allow-Credentials', true);
    // Pass to next layer of middleware
    next();
});


app.get('*/shopnow/static/bundle*', function (req, res, next) {
    req.url = req.url + '.gz';
    res.set('Content-Encoding', 'gzip');
    next();
});


const cacheTime = 300000;
app.use('/shopnow/static', Express.static('public', {maxAge: cacheTime, etag: false}));
app.use('/shopnow/static/bundle', Express.static('dist', {maxAge: cacheTime, etag: false}));
app.use('/shopnow/static/css', Express.static('public/css', {maxAge: cacheTime, etag: false}));


process.title = process.argv[2];
process.env['NODE_TLS_REJECT_UNAUTHORIZED'] = '0';

// Use this middleware to set up hot module reloading via webpack.
const compiler = webpack(webpackConfig);
app.use(webpackDevMiddleware(compiler, {noInfo: true, publicPath: webpackConfig.output.publicPath}));
app.use(webpackHotMiddleware(compiler));
app.set('view engine', 'ejs');
app.disable('view cache');
const corsOptions = {origin: /att\.com$/}

// Use cookie parser to get client side cookies
app.use(cookieParser());
app.use(bodyParser.json());
app.use(cors(corsOptions));
app.use(device.capture());
app.use(frameguard());


process.on('SIGINT', function (msg) {
    // by default, you have 1600ms
    setTimeout(function () {
        process.exit(0);
    }, 300)
});


function autoReloadCache() {
    let hostName = argv.serverName || ip.address() || os.hostname();
    if (!hostName.toString().startsWith("http")) {
        hostName = "http://" + hostName;
    }
    if (!isNotEmpty(argv.serverName)) {
        hostName = hostName + ":3080";
    }
    let options = {
        credentials: 'same-origin',
        method: 'GET',
        size: 0
    };
    dockerHostIp((error, result) => {
        if (result) {
            bLog.info("Awesome, we're within a Docker container with Host IP:", result);
        } else if (error) {
            bLog.info("Awww, we got an error. We're probably not in a Docker container");
        }
    });
    hostName = "http://localhost:3080";
    bLog.info("My local host name used for auto cache load ===> ", hostName)
    if (isNotEmpty(hostName)) {
        const urls = returnProps("cache.json").autoLoadCachePaths;
        for (let i in urls) {
            bLog.info("loading these urls to in-memory cache ====>", urls[i])
            let completeUrl = hostName + urls[i];
            bLog.info("Complete URL used for in-memory cache ====>", completeUrl)
            fetch(completeUrl, options).then(function (res) {
                bLog.info("Status for the url " + completeUrl + " ====>", res.status);
            }).then(function (json) {
                bLog.info(json, 'results');
            }, /* istanbul ignore next */function (err) {
                bLog.info(err, 'error');
            });
        }
    }
}

app.listen(port, (error) => {
    if (error) {
        console.error(error);
    } else {
        console.info(`==> ðŸŒŽ  Listening on port ${port}. Open up http://localhost:${port}/ in your browser.`);
        if (typeof process !== 'undefined' && typeof process.send === "function") {
            process.send('ready');
        }
        initProps('filter.json');
        initProps('config.json');
        initProps('categories.json');
        initProps('orientationHeader.json');
        initProps('preFooterLinks.json');
        initProps('legal.json');
        initProps('cache.json');
        autoReloadCache();
        const autoRefreshTime = returnProps("cache.json").autoLoadCacheInterval;
        setInterval(autoReloadCache, autoRefreshTime);
        app.use(require('./routeHandler'));
    }
});


//routeHandler.js

import React from 'react';
import {renderToString} from 'react-dom/server';
import {StaticRouter, matchPath} from 'react-router-dom';
import Routes from '../common/routes';
import {Provider} from 'react-redux';
import createHistory from 'history/createMemoryHistory';
import {syncHistory} from 'redux-simple-router';
import configureStore from '../common/store/configureStore';
import express from 'express';
import serialize from 'serialize-javascript';
import Helmet from "react-helmet";
import {
    initialLoad, fetchResults, pushSignalsToFusion, fetchOneMapResults,
    fetchFilterResults, fetchCompareData, updateFilters
} from '../common/actions/phoneActionDispatcher';
import {isNotEmpty, isSMB, returnProps, returnCookieValue} from '../common/helper/helper';
const mcache = require('memory-cache');
const bLog = require('../logger/logger').log;

const router = express.Router();
//Middle ware that is specific to this router
router.use(function timeLog(req, res, next) {
    bLog.info('Time: ', Date.now());
    next();
});


const cache = () => {
    return (req, res, next) => {
        const cacheFlag = returnProps('cache.json').enabled;
        bLog.info("Cache flag is set to===>", cacheFlag);
        bLog.info("Response status--->", res.statusCode);
        const duration = returnProps('cache.json').routeCacheInterval;
        bLog.info("Original url===>", req.originalUrl);
        bLog.info("Route Cache time is===>", duration);
        let key = '__express__' + req.originalUrl || req.url;
        const cookieGNSESSValue = returnCookieValue(req, 'GNSESS', 'req');
        let encFanId = '';
        try {
            if(isNotEmpty(cookieGNSESSValue)) {
                encFanId = JSON.parse(cookieGNSESSValue).FANID;
            }
        } catch (e) {
            bLog.error("Error in parsing GNSESS cookie", e);
        }
        if (isNotEmpty(encFanId)) {
            key = key + "&encFanId=" + encFanId;
        }
        let cachedBody = mcache.get(key);
        if (cachedBody && cacheFlag === true) {
            bLog.info("Returning data from cache!!");
            res.send(cachedBody);
            return;
        } else {
            bLog.info("Returning data from origin!!");
            res.sendResponse = res.send;
            res.send = (body) => {
                if (res.statusCode == 200) {
                    mcache.put(key, body, duration);
                }
                res.sendResponse(body);
            }
            next();
        }
    }
}

const route = () => {
    return (req, res, next) => {
        let reqURL = req.path;
        let redirectURL = '';
        let isPrepaid = false;
        let customer = 'consumer';
        if (isSMB(reqURL)) {
            customer = 'smb';
        }
        if(reqURL.indexOf('shopnow/att-prepaid') > -1){
            isPrepaid = true;
        }
        const DTABCookie = returnCookieValue(req, 'DTAB', 'req');
        if (DTABCookie === 'Tab=Bsn' && customer === 'consumer' && isPrepaid === false) {
            redirectURL = reqURL.replace('shopnow/', 'smallbusiness/');
            res.redirect(redirectURL);
            return;
        }
        next();
    }
}

router.get('*/shopnow*undefined*', function (req, res) {
    res.status(200).send('success');
});

/**
 * Route for gettig compare data from server
 * */
router.get('*/shopnow/query/compare*', cache(), function (req, res) {
    const compareDevices = req.query.compare;
    fetchCompareData(compareDevices, function (err, result) {
        if (err) {
            res.status(500).send({Error: 'Error accessing API'});
        } else {
            res.setHeader('Content-Type', 'application/json');
            res.status(200).send(result);
        }
    });
});

/**
 * Devicelisting query router defined to get results from server
 * req: request object
 * res: response object
 */

router.get('*/shopnow/query*', cache(), function (req, res) {
    const start = req.query.start;
    const q = req.query.q;
    const rows = req.query.rows;
    const smb = req.query.smb;
    fetchResults(start, rows, req, q, smb, function (err, result) {
        if (err) {
            res.status(500).send({Error: 'Error accessing API'});
        } else {
            res.setHeader('Content-Type', 'application/json');
            res.status(200).send(result);
        }
    });
});

router.get('*/shopnow/filters/update*', cache(), function (req, res) {
    const q = req.query.q;
    const smb = req.query.smb;
    const filter = req.query.filter;
    updateFilters(req, q, smb, filter, function (err, result) {
        if (err) {
            res.status(500).send({Error: 'Error accessing API'});
        } else {
            res.setHeader('Content-Type', 'application/json');
            res.status(200).send(result);
        }
    });
});

router.get('*/shopnow/filters*', cache(), function (req, res) {
    const start = req.query.start;
    const q = req.query.q;
    const rows = req.query.rows;
    const smb = req.query.smb;
    const sId = req.query.id;
    const invId = req.query.invId;
    const zipCode = req.query.zip;
    const dType = req.query.type;
    const filter = req.query.filter;
    fetchFilterResults(start, rows, req, q, smb, dType, sId, invId, zipCode, filter, function (err, result) {
        if (err) {
            res.status(500).send({Error: 'Error accessing API'});
        } else {
            res.setHeader('Content-Type', 'application/json');
            res.status(200).send(result);
        }
    });
});

router.get('*/shopnow/shipping*', cache(), function (req, res) {
    const zipcode = req.query.zipCode;
    fetchOneMapResults(zipcode, req, function (err, result) {
        if (err) {
            res.status(500).send({Error: 'Error accessing API'});
        } else {
            res.setHeader('Content-Type', 'application/json');
            res.status(200).send(result);
        }
    });
});

/**
 * Shop router defined to send all get request to this method
 */
router.get('*/shopnow/phones*|*/shopnow/tablets*|' +
    '*/shopnow/wearables*|*/shopnow/connected-devices-and-more*|' +
    '*/shopnow/att-prepaid*|*/smallbusiness/phones*|' +
    '*/smallbusiness/tablets*|*/smallbusiness/wearables*|' +
    '*/smallbusiness/connected-devices-and-more*', route(), cache(), function (req, res, next) {
    bLog.info("hi");
    const staticContext = {};
    const history = createHistory();
    const reduxRouterMiddleware = syncHistory(history);
    // Create a new Redux store instance
    const store = configureStore({}, reduxRouterMiddleware);
    let reqURL = req.originalUrl;
    let customer = 'consumer';
    if (isSMB(reqURL)) {
        customer = 'smb';
    }
    const deviceType = req.device.type;
    const zipCode = req.query.zip;
    store.dispatch(initialLoad(req, res, next)).then(() => {
        const component = (<Provider store={store}>
            <StaticRouter location={req.url} context={staticContext}>
                <Routes />
            </StaticRouter>
        </Provider>);
        const html = renderToString(component);
        const helmet = Helmet.renderStatic();
        	
        let initialState = store.getState();
        initialState = serialize(initialState, {isJSON: true});
        if (!res.headersSent) {
            res.status(200).render('devicelisting', {
                html: html,
                helmet: helmet,
                initialState: initialState,
                customerType: customer,
                deviceType: deviceType,
                zipCode: zipCode,
                reqURL: reqURL
            });
        }
    });
});

/**
 * Shop router defined to push signals to fusion for all requests coming to this method
 */
router.post('*/shopnow/signals*', function (req, res) {
    try {
        var body = req.body;
        const url = body.signals[0].params.url;
        var collectionName = body.name;
        var isValidHost = false;
        if (isNotEmpty(req.headers.origin) && req.headers.origin.includes('.att.com')) {
            isValidHost = true;
        } else if (isNotEmpty(req.headers.referer) && req.headers.referer.includes('.att.com')) {
            isValidHost = true;
        }
        if (isValidHost) {
            pushSignalsToFusion(body, collectionName, function (err, result) {
                if (err) {
                    res.setHeader('Content-Type', 'application/json');
                    res.status(200).send({"Signals": "Failure", "url": url});
                } else {
                    res.setHeader('Content-Type', 'application/json');
                    res.status(200).send({"Signals": "success", "url": url});
                }
            })
        } else {
            res.setHeader('Content-Type', 'application/json');
            res.status(500).send({"Signals": "Failure", "Error": "Invalid Host"});
        }
    } catch (exception) {
        res.status(500).send({"Signals": "Failure", "Exception": "Some exception has occured"});
    }
});

module.exports = router;


//phones.js

/**
 * Created by nk246e on 7/24/2018.
 */
import React from 'react';
import {connect} from 'react-redux';
import DeviceListing from '../components/DeviceListing';
import DeviceListingHeader from '../components/DeviceListingHeader';
import {isNotEmpty, isSMB, getKeyword} from '../helper/helper';
import OrientationHeader from '../components/OrientationHeader';
import {fetchResults} from '../actions/clientDispatcher';
import PromotionMarquee from '../components/PromotionMarquee';
import Pagination from '../components/Pagination';
import LongLegalText from '../components/LongLegalText';
import PreFooterLinks from '../components/PreFooterLinks';
import CompareModal from '../components/CompareModal';
import MetaTagsComp from '../components/MetaTagsComp';

@connect(
    state => ({
        fanDetails: state.fanDetails,
        results: state.results,
        iruPriceDetails: state.iruPriceDetails,
        categories: state.categories,
        filters: state.filters,
        orientation: state.orientation,
        preFooterLinks: state.preFooterLinks,
        promotions: state.promotions,
        legal: state.legal,
        pickup: state.pickup,
        delivery: state.delivery,
        cache: state.cache,
        compare: state.compare
    })
)

export default class Phones extends React.Component {
    constructor() {
        super();
    }

    componentDidUpdate() {
        window.onpopstate = (e) => {
            let pathName = e.path[0].location.pathname;
            const keyword = getKeyword(pathName);
            if (isNotEmpty(keyword)) {
                let filterData = {};
                filterData['rows'] = 20;
                filterData['smb'] = isSMB(pathName);
                this.props.dispatch(fetchResults(0, filterData, keyword));
            }
        }
    }

    render() {
        let promoCount = 0;
        let pagination = '';
        var _props = this.props;
        let orientation = this.props.orientation;
        let promotions = this.props.promotions;
        let preFooterLinks = this.props.preFooterLinks;
        const results = this.props.results;
        const iruPriceDetails = this.props.iruPriceDetails;
        const fanDetails = this.props.fanDetails;
        const categories = this.props.categories;
        const compareData = this.props.compare;
        const cache = this.props.cache
        let containerData = '';
        /* istanbul ignore else */
        if (isNotEmpty(results) && isNotEmpty(results.data) && results.data.grouped.productGroup.matches > 0) {
            const docs = results.data.grouped.productGroup.groups;
            pagination = results.pagination;
            containerData = docs.map(function (item, i) {
                item = item.doclist.docs[0];
                let skuId = item.id;
                let itemIruPriceDetails = '';

                if (isNotEmpty(iruPriceDetails.data) && isNotEmpty(iruPriceDetails.data.pricingInfo)) {
                    itemIruPriceDetails = iruPriceDetails.data.pricingInfo.methodReturnValue[skuId];
                } else {
                    itemIruPriceDetails = '';
                }
                /* istanbul ignore else */
                if (Object.getOwnPropertyNames(item).length != 0) {
                    return (
                        <DeviceListing key={'phones' + i} { ...item } { ..._props }
                                       itemIruPriceDetails={itemIruPriceDetails}
                                       fanDetails={fanDetails}/>

                    );
                }
            });
        }
        /* istanbul ignore else */
        if (isNotEmpty(promotions.data) && isNotEmpty(promotions.data.response) && isNotEmpty(promotions.data.response.docs)) {
            promoCount = promotions.data.response.docs.length;
        }


        return (
            <section>

                <OrientationHeader orientation={orientation}/>
                <MetaTagsComp pathname={this.props.location.pathname}/>
                <section className="main-wrapper">
                    {promoCount > 0 ? <PromotionMarquee { ...this.props } promotions={promotions}/> : ''}
                    <div className="container">
                        <div className="pick-device">
                            <h2 className="heading-major-section"><strong>Pick your device</strong></h2>
                            <DeviceListingHeader { ...this.props } categories={categories}/>
                            <div className="row">
                                <div className="span12">
                                    <div className="product-tiles autoSize noDeviceSpace" id="shop-tiles">
                                        {containerData}
                                    </div>
                                    <Pagination pagination={pagination} dispatch={this.props.dispatch}/>
                                    <LongLegalText/>
                                    </div>
                            </div>

                        </div>
                    </div>
                    <PreFooterLinks preFooterLinks={preFooterLinks}/>
                </section>
                <div className="modalwrapper modal-docked no-pad">
                    <div id="legalModal" className="modal fade" role="dialog" aria-hidden="true" tabIndex="-1"
                         aria-labelledby="myModalLabel">
                        <div className="modal-header" style={{'overflow': 'visible'}}>
                            <div className="container rel">
                                <h2 id="legalModalLabel" tabIndex="-1"><strong>See price details:</strong></h2>
                                <div className="corner-button">
                                    <button type="button" className="close" data-dismiss="modal"
                                            aria-label="Close"  onClick={/* istanbul ignore next */(event) => {
											var jsonParams={"eventCode":"Link_Click",
											"linkName":"Close",
											"linkPosition":"Body",
											"linkDestinationUrl":this.props.location.pathname,
											"eventAction":"linkClick"
											  };	deviceListSystemEventAdobe(jsonParams); }}></button>
                                </div>
                            </div>
                        </div>
                        <div id='legalModalBody' className="modal-body container full-height">
                            <div className="container">
                                <div id='legalModalContent' className="modalContent">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <CompareModal compare={compareData} cache={cache}/>
            </section>
        );
    }
}

//configure store
import {createStore, applyMiddleware, compose} from 'redux';
import thunk from 'redux-thunk';
import rootReducer from '../reducers';
import DevTools from '../containers/DevTools';
import promise from 'redux-promise';

let store;
export default function configureStore(initialState, reduxRouterMiddleware) {
    const createStoreWithMiddleware = applyMiddleware(
        thunk,promise,
        reduxRouterMiddleware
    )(createStore);
    const isProduction = process.env.NODE_ENV === 'production';
    if (!isProduction) {
        store = createStoreWithMiddleware(rootReducer, initialState, compose(DevTools.instrument()));
    }
    else {
        store = createStoreWithMiddleware(rootReducer, initialState, compose());
    }
    if (module.hot) {
        // Enable Webpack hot module replacement for reducers
        module.hot.accept('../reducers', () => {
            const nextRootReducer = require('../reducers');
            store.replaceReducer(nextRootReducer)
        })
    }
    return store;
}
export function returnStore() {
    return store
}

//reducer/index.js

import {combineReducers} from 'redux';
import {routeReducer} from 'redux-simple-router';
import fanDetails from './fanDetails';
import iruPriceDetails from './iruPriceDetails';
import results from './results';
import cookies from './cookies';
import filters from './filters';
import categories from './categories';
import orientation from './orientation';
import promotions from './promotions';
import legal from './legal';
import pickup from './pickup';
import delivery from './delivery';
import preFooterLinks from './preFooterLinks';
import cache from './cache';
import compare from './compare';
import appConfig from './appConfig';

/**
 * Combine all the reducers
 * @type {Function}
 */
const rootReducer = combineReducers({
    routing: routeReducer,
    results,
    fanDetails,
    iruPriceDetails,
    cookies,
    filters,
    categories,
    orientation,
    preFooterLinks,
    promotions,
    legal,
    pickup,
    delivery,
    cache,
    compare,
    appConfig
});
export default rootReducer;


//fandetails

/**
 * Author   : rs285x
 * Date     : 7/30/2018.
 */

import {FETCH_FAN_DETAILS_START,FETCH_FAN_DETAILS_FULFILLED,FETCH_FAN_DETAILS_ERROR } from '../actions/actionCreators';

/**
* This reducer sets the FAN Details data
* @param state
* @param action
* @returns {{data: string}}
*/

export default function fanDetails(state = {data: ''}, action) {
switch (action.type) {
      /* Fetch data for start fan details */
      case  FETCH_FAN_DETAILS_START:
      state = {...state, fetching: true, fetched: false,data: ''};
      break;
      /* Fetch data for FAN Details after completion */
      case FETCH_FAN_DETAILS_FULFILLED:
      state = {
       ...state, fetched: true,fetching:false,
       data: action.payload
            };
      break;
      /* Fetch data for FAN Details error */
      case FETCH_FAN_DETAILS_ERROR:
      state = {
       ...state, fetched: true,fetching:false,
       data: action.payload
            };
      break;
      /* Return default state */
      default:
            return state;
     }
    return state;
}


//actioncreators

/**
 * Created by nk246e on 7/25/2018.
 */
export const FETCH_DATA_FULFILLED = 'FETCH_DATA_FULFILLED';
export const FETCH_DATA_ERROR = 'FETCH_DATA_ERROR';
export const FETCH_DATA_START = 'FETCH_DATA_START';
export const FETCH_APP_CONFIG_START = 'FETCH_APP_CONFIG_START';
export const FETCH_APP_CONFIG_FULFILLED = 'FETCH_APP_CONFIG_FULFILLED';
export const FETCH_APP_CONFIG_ERROR = 'FETCH_APP_CONFIG_ERROR';
export const FETCH_FAN_DETAILS_START = 'FETCH_FAN_DETAILS_START';
export const FETCH_FAN_DETAILS_FULFILLED='FETCH_FAN_DETAILS_FULFILLED';
export const FETCH_FAN_DETAILS_ERROR='FETCH_FAN_DETAILS_ERROR';
export const FETCH_COOKIES_FULFILLED='FETCH_COOKIES_FULFILLED';
export const FETCH_COOKIES_ERROR='FETCH_COOKIES_ERROR';
export const FETCH_IRU_PRICE_DETAILS_START='FETCH_IRU_PRICE_DETAILS_START';
export const FETCH_IRU_PRICE_DETAILS_FULFILLED='FETCH_IRU_PRICE_DETAILS_FULFILLED';
export const FETCH_IRU_PRICE_DETAILS_ERROR='FETCH_IRU_PRICE_DETAILS_ERROR';
export const FETCH_FILTERS_FULFILLED = 'FETCH_FILTERS_FULFILLED';
export const FETCH_FILTERS_ERROR = 'FETCH_FILTERS_ERROR';
export const FETCH_FILTERS_START = 'FETCH_FILTERS_START';
export const FETCH_CATEGORIES_FULFILLED = 'FETCH_CATEGORIES_FULFILLED';
export const FETCH_CATEGORIES_ERROR = 'FETCH_CATEGORIES_ERROR';
export const FETCH_CATEGORIES_START = 'FETCH_CATEGORIES_START';
export const FETCH_ORIENTATION_FULFILLED = 'FETCH_ORIENTATION_FULFILLED';
export const FETCH_ORIENTATION_ERROR = 'FETCH_ORIENTATION_ERROR';
export const FETCH_ORIENTATION_START = 'FETCH_ORIENTATION_START';
export const FETCH_PREFOOTER_FULFILLED = 'FETCH_PREFOOTER_FULFILLED';
export const FETCH_PREFOOTER_ERROR = 'FETCH_PREFOOTER_ERROR';
export const FETCH_PREFOOTER_START = 'FETCH_PREFOOTER_START';
export const FETCH_PROMOTIONS_FULFILLED = 'FETCH_PROMOTIONS_FULFILLED';
export const FETCH_PROMOTIONS_ERROR = 'FETCH_PROMOTIONS_ERROR';
export const FETCH_PROMOTIONS_START = 'FETCH_PROMOTIONS_START';
export const FETCH_LEGAL_FULFILLED = 'FETCH_LEGAL_FULFILLED';
export const FETCH_LEGAL_ERROR = 'FETCH_LEGAL_ERROR';
export const FETCH_PICKUP_FULFILLED = 'FETCH_PICKUP_FULFILLED';
export const FETCH_PICKUP_ERROR = 'FETCH_PICKUP_ERROR';
export const FETCH_PICKUP_START = 'FETCH_PICKUP_START';
export const FETCH_DELIVERY_FULFILLED = 'FETCH_DELIVERY_FULFILLED';
export const FETCH_DELIVERY_ERROR = 'FETCH_DELIVERY_ERROR';
export const FETCH_DELIVERY_START = 'FETCH_DELIVERY_START';
export const FETCH_CACHE_FULFILLED = 'FETCH_CACHE_FULFILLED';
export const FETCH_CACHE_ERROR = 'FETCH_CACHE_ERROR';
export const FETCH_CACHE_START = 'FETCH_CACHE_START';
export const FETCH_COMPARE_FULFILLED = 'FETCH_COMPARE_FULFILLED';
export const FETCH_COMPARE_ERROR = 'FETCH_COMPARE_ERROR';
export const FETCH_COMPARE_START = 'FETCH_COMPARE_START';

/**
 * This function sets the start fetching for Categorydetails
 * @returns {{type: string}}
 */
export function setCategoriesStart() {
    return {
        type: FETCH_CATEGORIES_START
    };
}

/**
 * This function sets the Category details received in reducer
 * @param payload
 * @returns {{type: string, payload: {value: *}}}
 */
export function setCategories(payload, deviceType) {
    return {
        type: FETCH_CATEGORIES_FULFILLED,
        payload: payload,
        deviceType: deviceType
    };
}
/**
 * This function sets the error details while setting categories in reducer
 * @param payload
 * @returns {{type: string, payload: *}}
 */
export function setCategoriesError(payload) {
    return {
        type: FETCH_CATEGORIES_ERROR,
        payload: payload
    };
}
/**
 * This function sets the browser cookie details in reducer
 * @param payload
 * @returns {{type: string, payload: {value: *}}}
 */
export function setCookies(payload) {
    return {
        type: FETCH_COOKIES_FULFILLED,
        payload: payload
    };
}
/**
 * This function sets the error details while reading cookies in reducer
 * @param payload
 * @returns {{type: string, payload: *}}
 */
export function setCookiesError(payload) {
    return {
        type: FETCH_COOKIES_ERROR,
        payload: payload
    };
}
/**
 * This function sets the start fetching for IRU Price details
 * @returns {{type: string}}
 */
export function setIruPriceDetailsStart() {
    return {
        type: FETCH_IRU_PRICE_DETAILS_START
    };
}

/**
 * This function sets the IRU Price details received from Pricing API  in reducer
 * @param payload
 * @returns {{type: string, payload: {value: *}}}
 */
export function setIruPriceDetails(payload) {
    return {
        type: FETCH_IRU_PRICE_DETAILS_FULFILLED,
        payload: payload
    };
}
/**
 * This function sets the error details for Pricing API
 * @param payload
 * @returns {{type: string, payload: *}}
 */

  export function setIruPriceDetailsError(payload) {
    return {
        type: FETCH_IRU_PRICE_DETAILS_ERROR,
        payload: payload
    };
}

/**
 * This function sets the start fetching for results data
 * @returns {{type: string}}
 */
export function setDataStart() {
    return {
        type: FETCH_DATA_START
    };
}

/**
 * This function sets the error details for the results
 * @param payload
 * @returns {{type: string, payload: *}}
 */
export function setDataError(payload) {
    return {
        type: FETCH_DATA_ERROR,
        payload: payload
    };
}
/**
 * This function sets teh results data in reducer
 * @param payload
 * @returns {{type: string, payload: {value: *}}}
 */
export function setResultsData(payload, pagination) {
    return {
        type: FETCH_DATA_FULFILLED,
        payload: {
            value: payload,
            pagination: pagination
        }
    };
}


/**
 * This function sets the start fetching for application config data
 * @returns {{type: string}}
 */
export function setAppConfigStart() {
    return {
        type: FETCH_APP_CONFIG_START
    };
}
/**
 * This function sets the application config data in reducer
 * @param payload
 * @returns {{type: string, payload: {value: *}}}
 */
export function setAppConfig(payload) {
    return {
        type: FETCH_APP_CONFIG_FULFILLED,
        payload: payload
    };
}

/**
 * This function sets the error details for the application config
 * @param payload
 * @returns {{type: string, payload: *}}
 */
export function setAppConfigError(payload) {
    return {
        type: FETCH_APP_CONFIG_ERROR,
        payload: payload
    };
   }
/**
 * This function sets the start fetching for FAN Details data
 * @returns {{type: string}}
 */
export function setFanDetailsStart() {
    return {
        type: FETCH_FAN_DETAILS_START
    };
}
/**
 * This function sets the FAN Details data in reducer
 * @param payload
 * @returns {{type: string, payload: {value: *}}}
 */
export function setFanDetails(payload) {
    return {
        type: FETCH_FAN_DETAILS_FULFILLED,
        payload: payload
};
  }

/**
 * This function sets the error details for the FAN Details
 * @param payload
 * @returns {{type: string, payload: *}}
 */
 export function setFanDetailsError(payload) {
 return {
     type: FETCH_FAN_DETAILS_ERROR,
     payload: payload
 };
}

/**
 * This function sets the start fetching for filters data
 * @returns {{type: string}}
 */
export function setFiltersStart() {
    return {
        type: FETCH_FILTERS_START
    };
}

/**
 * This function sets the error details for the filters
 * @param payload
 * @returns {{type: string, payload: *}}
 */
export function setFiltersError(payload) {
    return {
        type: FETCH_FILTERS_ERROR,
        payload: payload
    };
}
/**
 * This function sets the filters data in reducer
 * @param payload
 * @returns {{type: string, payload: {value: *}}}
 */
export function setFiltersData(payload) {
    return {
        type: FETCH_FILTERS_FULFILLED,
        payload: {
            value: payload
        }
    };
}

/**
 * This function sets the start fetching for Orientation data
 * @returns {{type: string}}
 */
export function setOrientationStart() {
    return {
        type: FETCH_ORIENTATION_START
    };
}

/**
 * This function sets the error details for the Orientation
 * @param payload
 * @returns {{type: string, payload: *}}
 */
export function setOrientationError(payload) {
    return {
        type: FETCH_ORIENTATION_ERROR,
        payload: payload
    };
}
/**
 * This function sets the Orientation data in reducer
 * @param payload
 * @returns {{type: string, payload: {value: *}}}
 */
export function setOrientationData(payload) {
    return {
        type: FETCH_ORIENTATION_FULFILLED,
        payload: {
            value: payload
        }
    };
}

/**
 * This function sets the start fetching for Orientation data
 * @returns {{type: string}}
 */
export function setPreFooterStart() {
    return {
        type: FETCH_PREFOOTER_START
    };
}

/**
 * This function sets the error details for the Orientation
 * @param payload
 * @returns {{type: string, payload: *}}
 */
export function setPreFooterError(payload) {
    return {
        type: FETCH_PREFOOTER_ERROR,
        payload: payload
    };
}
/**
 * This function sets the Pre Footer links data in reducer
 * @param payload
 * @returns {{type: string, payload: {value: *}}}
 */
export function setPreFooterLinks(payload) {
    return {
        type: FETCH_PREFOOTER_FULFILLED,
        payload: {
            value: payload
        }
    };
}

/**
 * This function sets the start fetching for promotions data
 * @returns {{type: string}}
 */
export function setPromotionsStart() {
    return {
        type: FETCH_PROMOTIONS_START
    };
}

/**
 * This function sets the error details for the promotions
 * @param payload
 * @returns {{type: string, payload: *}}
 */
export function setPromotionsError(payload) {
    return {
        type: FETCH_PROMOTIONS_ERROR,
        payload: payload
    };
}
/**
 * This function sets the promotions data in reducer
 * @param payload
 * @returns {{type: string, payload: {value: *}}}
 */
export function setPromotionsData(payload, originalPromo) {
    return {
        type: FETCH_PROMOTIONS_FULFILLED,
        payload: {
            value: payload,
            originalPromo: originalPromo
        }
    };
}

/**
 * This function sets the error details for the legal
 * @param payload
 * @returns {{type: string, payload: *}}
 */
export function setLegalError(payload) {
    return {
        type: FETCH_LEGAL_ERROR,
        payload: payload
    };
}
/**
 * This function sets the legal data in reducer
 * @param payload
 * @returns {{type: string, payload: {value: *}}}
 */
export function setLegalData(payload, mapping) {
    return {
        type: FETCH_LEGAL_FULFILLED,
        payload: {
            value: payload,
            mapping: mapping
        }
    };
}

/**
 * This function sets the start fetching for pickup data
 * @returns {{type: string}}
 */
export function setPickupStart() {
    return {
        type: FETCH_PICKUP_START
    };
}

/**
 * This function sets the error details for the pickup
 * @param payload
 * @returns {{type: string, payload: *}}
 */
export function setPickupError(payload) {
    return {
        type: FETCH_PICKUP_ERROR,
        payload: payload
    };
}
/**
 * This function sets the pickup data in reducer
 * @param payload
 * @returns {{type: string, payload: {value: *}}}
 */
export function setPickupData(payload) {
    return {
        type: FETCH_PICKUP_FULFILLED,
        payload: {
            value: payload
        }
    };
}

/**
 * This function sets the start fetching for delivery data
 * @returns {{type: string}}
 */
export function setDeliveryStart() {
    return {
        type: FETCH_DELIVERY_START
    };
}

/**
 * This function sets the error details for the delivery
 * @param payload
 * @returns {{type: string, payload: *}}
 */
export function setDeliveryError(payload) {
    return {
        type: FETCH_DELIVERY_ERROR,
        payload: payload
    };
}
/**
 * This function sets the delivery data in reducer
 * @param payload
 * @returns {{type: string, payload: {value: *}}}
 */
export function setDeliveryData(payload) {
    return {
        type: FETCH_DELIVERY_FULFILLED,
        payload: {
            value: payload
        }
    };
}

/**
 * This function sets the start fetching for cache data
 * @returns {{type: string}}
 */
export function setCacheStart() {
    return {
        type: FETCH_CACHE_START
    };
}

/**
 * This function sets the cache data in reducer
 * @param payload
 * @returns {{type: string, payload: {value: *}}}
 */
export function setCacheData(payload) {
    return {
        type: FETCH_CACHE_FULFILLED,
        payload: {
            value: payload
        }
    };
}

/**
 * This function sets the start fetching for compare data
 * @returns {{type: string}}
 */
export function setCompareStart() {
    return {
        type: FETCH_COMPARE_START
    };
}

/**
 * This function sets the error details for the compare
 * @param payload
 * @returns {{type: string, payload: *}}
 */
export function setCompareError(payload) {
    return {
        type: FETCH_COMPARE_ERROR,
        payload: payload
    };
}
/**
 * This function sets compare data in reducer
 * @param payload
 * @returns {{type: string, payload: {value: *}}}
 */
export function setCompareData(payload) {
    return {
        type: FETCH_COMPARE_FULFILLED,
        payload: {
            value: payload
        }
    };
}
