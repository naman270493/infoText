const webdriver = require('selenium-webdriver');
var assert = require('assert');
	var by = webdriver.By;
	const _ = require('lodash');
	const prettyMs = require('pretty-ms');
	const loadtest = require('loadtest');
	var performance = require('performance-now');
	const test = require('selenium-webdriver/testing');
	var http = require('http');
var driver = config.getWebDriverDesktop(config.driverName);

//match the data with string 
waitForElement(driver,'xpath',testpath);
		    driver.findElement(by.xpath(testpath)).getText().then(function (text) {
    		 assert.equal(text,testData);
				done();
			});   
//check if text is present in className specified			
waitForElement(driver,'className',testpath);  
		    driver.findElement(by.className(testpath)).getText().then(function (text) {
	    		 assert.equal(text.length>0,true);
					done();
				});
//Li count				
waitForElement(driver,'className',testpath);

	    driver.findElement(by.className(testpath)).findElements(by.tagName('li')).then(function(elements){        		 
			
			assert.equal(elements.length,count);
			done();
		});		
//click the className

driver.findElement(by.className(testpath)).click()
		.then(function() {
			console.log("clicked successfully");
			done();
		});	

//for authentication
driver.findElement(by.className(testpath)).sendKeys(data);

//is not displayed
waitForElement(driver,'className',testpath);
		driver.findElement(by.className(testpath)).isDisplayed().then(function(text) {               
			assert.equal(text, false);
			done();		
			
//partial link click
waitForElement(driver,'partialLinkText',testpath);
		driver.findElement(by.partialLinkText(testpath)).click()
		.then(function() {
			console.log("clicked successfully");
			done();
//get current url
   driver.getCurrentUrl().then(function(url) {
		   
            assert.equal(url.indexOf(text)>=-1, true);
            done();
        });

//get url 
driver.get(url).then(function () {
	    	driver.sleep(10000);
			invoke.isDisplayed(driver,testSuitToValidate.sundayskyVideo,done);
	    	
	    	});
//navigate to url - u can use only one getURl else u have to navigate
driver.navigate().to(url);
invoke.ClickEventPartialLink(driver,"View all myAT&T account results",done); 

isEnabled()
getAttribute("src")
isDisplayed()


??JUnit

 public AccountType fillProfileItemFromIUCLPAccount(MutableRepositoryItem lProfAccItem, AccountsBean iuclpAccnt) {
		AccountType accountType = iuclpAccnt.getAccountType();
		lProfAccItem.setPropertyValue(EsupportProfileConstants.PROPERTY_ACCOUNT_TYPE_LOB, iuclpAccnt.getAccountType().name());
		
		switch (accountType) {
        case UVERSE:
		  UverseAccountBean uverseAccountBean = iuclpAccnt.getUverseAccount();
		  //set property in lProfAccItem
		case Titan:
			TitanAccountInfoBean  titanAccountBean = iuclpAccnt.getTitanAccount();
			 //set property in lProfAccItem
		 }  
		   return accountType;
}		 


Test methods
testPopulateProfileItemFromIUCLPAccountWhenAccountTypeIsNull(){
		when(accntsBean.getUverseAccount()).thenReturn(uverseBean);
          when(accntsBean.getAccountType()).thenReturn(null);
          when(uverseBean.getAccountStatus()).thenReturn("P");
          when(uverseBean.getBillingFullName()).thenReturn(COMPANY_NAME);
          assertThat(testObj.fillProfileItemFromIUCLPAccount(profItem, accntsBean)).isNull();

}

testPopulateProfileItemFromIUCLPAccountForUverse
	 when(accntsBean.getUverseAccount()).thenReturn(uverseBean);
                when(accntsBean.getAccountType()).thenReturn(AccountType.UVERSE);
                when(uverseBean.getBillingFullName()).thenReturn(COMPANY_NAME);
                when(uverseBean.getAccountStatus()).thenReturn("P");
                assertThat(testObj.fillProfileItemFromIUCLPAccount(profItem, accntsBean)).isEqualTo(AccountType.UVERSE);
}
 //assertTrue(testObj.fillProfileItemFromIUCLPAccount(profItem,accntsBean).equals(AccountType.UVERSE));
 //assertFalse(testObj.isIUCLPAccountAuthenticated(accntsBean));
 
 Black box testing is the Software testing method which is used to test the software without knowing the internal structure of code or program. 
White box testing is the software testing method in which internal structure is being known to tester who is going to test the software.
Regression - Testing an application as a whole for the modification in any module or functionality is termed as Regression Testing. 
Sanity Testing is done to determine if a new software version is performing well enough to accept it for a major testing effort or not
Security Testing is done to check how the software or application or website is secure from internal and external threats
Smoke Testing checks that no show stopper defect exists in the build which will prevent the testing team to test the application in detail. Whenever a new build is provided by the development team then the software testing team validates the build and ensures that no major issue exists. 

Selenium Suite Of Tools
Selenium RC (Remote control)
Selenium IDE
Selenium Grid
Selenium WebDriver

Selenium Core hit a roadblock in terms of cross-domain testing because of the same origin policy.To overcome the same origin policy issue, testers needed to install local copies of both Selenium Core (a JavaScript program) and the web server containing the web application being tested so they would belong to the same domain.
RC overcame the problem by involving an HTTP proxy server to “trick” the browser into believing that Selenium Core and the web application being tested come from the same domain.

Selenium IDE is a Firefox plugin which is used to quickly and frequently, record and execute test cases. 
Selenium Grid was a part of Selenium v1 and it was used in combination with RC to run tests on remote machines.

Selenium WebDriver provides a programming interface to create and execute test cases.

WebDriver is an upgrade to RC because it is much faster. It is faster because it makes direct calls to the browser. RC on the other hand needs an RC server to interact with the web browser. Each browser has its own driver on which the application runs

XPath is used to locate a web element based on its XML path. 
Single Slash “/” – Single slash is used to create Xpath with absolute path i.e. the xpath would be created to start selection from the document node/start node.
Double Slash “//” – Double slash is used to create Xpath with relative path i.e. the xpath would be created to start selection from anywhere within the document.

LinkText: it returns elements with an exact match of the given text
PartialLinkText returns elements which include the given text

The explicit wait is used to tell the Web Driver to wait for certain conditions (Expected Conditions) or the maximum time exceeded before throwing an "ElementNotVisibleException" exception.
explicit wait: thread.sleep not recommended , 
The implicit wait will tell to the web driver to wait for certain amount of time before it throws a "No Such Element Exception".
implicit wait : driver.sleep, 


Selenium framework 
Selenium framework is a code structure for making code maintenance simpler, and code readability better. A framework involves breaking the entire code into smaller pieces of code, which test a particular functionality.
Benefits of Selenium framework

Increased code reusage
Improved code readability
Higher portability
Reduced script maintenance

Selenium is the most popular browser automation tool. 

navigate().refresh() – This command lets the user to refresh the current web page there by reloading all the web elements.
navigate().back() – The above command requires no parameters and takes back the user to the previous webpage in the web browser’s history

inline frame acronym as iframe is used to insert another document within the current HTML document

The same-origin policy restricts how a document or script loaded from one origin can interact with a resource from another origin



Select iframe by id
driver.switchTo().frame(Id);

Locating iframe using tagName
driver.switchTo().frame(driver.findElements(By.tagName(“iframe”).get(0));

Locating iframe using index

frame(index)
driver.switchTo().frame(0);

frame(Name of Frame)
driver.switchTo().frame(“name of the frame”);

frame(WebElement element)
Select Parent Window
driver.switchTo().defaultContent();

//wauit till 
waitForElement(driver,'className',testpath);  
		    driver.findElement(by.className(testpath)).getText().then(function (text) {
	    		 assert.equal(text.length>0,true);
					done();
				});   
findElement(): findElement() is used to find the first element in the current web page matching to the specified locator value. 
findElements() is used to find all the elements in the current web page matching to the specified locator value.
 
 WebDriver’s close() method closes the web browser window that the user is currently working 
 quit() method closes down all the windows that the program has opened.

//how to take a screenshot

driver.takeScreenshot().then(
    function(image, err) {
        require('fs').writeFile('out.png', image, 'base64', function(err) {
            console.log(err);
        });
    }
);
To include the File System module, use the require('fs') method
use for the File System module:

Read files - .readFile
Create files - .writeFile
Update files
Delete files
Rename files
(1) reading an image file and, (2) sending that buffer to the writeFile function, and (3) specifying the output to ‘binary’


//in java
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import java.io.File;
import java.io.IOException;
import org.apache.commons.io.FileUtils;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;

public class CaptureScreenshot {
WebDriver driver;
@Before
public void setUp() throws Exception {
driver = new FirefoxDriver();
driver.get("https://google.com");
}
@After
public void tearDown() throws Exception {
driver.quit();
}

@Test
public void test() throws IOException {
// Code to capture the screenshot
File scrFile = ((TakesScreenshot)driver).getScreenshotAs(OutputType.FILE);
// Code to copy the screenshot in the desired location
FileUtils.copyFile(scrFile, new File("C:\\CaptureScreenshot\\google.jpg"))
}
}

installation
node install
download chromedriver and add in path
npm install selenium-webdriver

//mocha chai
Mocha and Chai are two JavaScript frameworks commonly used together for unit testing.

Mocha is a testing framework that provides functions that are executed according in a specific order, and that logs their results to the terminal window.

When you read tests written in Mocha, you’ll see regular use of the keywords describe and it
The base component of test cases are assertions. Chai is an assertion library that is often used alongside Mocha. It provides functions and methods that help you compare the output of a certain test with its expected value. 

//docker- Docker can be termed as a container.By using Docker containers you can setup and package up a software application with all of the contents that are required to build that application, such as databases, libraries, and other dependencies, and finally, you can ship them all out as one package.

 jenkins- Jenkins is a self-contained, open source automation server which can be used to automate all sorts of tasks related to building, testing, and delivering or deploying software
				
TestNG is an advanced framework designed in a way to leverage the benefits by both the developers and testers. 
There are various advantages that make TestNG superior to JUnit. 

Added advance and easy annotations
Execution patterns can set
Concurrent execution of test scripts
Test case dependencies can be set			

//Framework types
Module Based Testing Framework: The framework divides the entire “Application Under Test” into the number of logical and isolated modules.
Data Driven Testing Framework helps the user segregate the test script logic and the test data from each other. It lets the user store the test data into an external database. The data is conventionally stored in “Key-Value” pairs
The Keyword Driven testing framework not only segregates the test data from the scripts, it also keeps the certain set of code belonging to the test script into an external data file.
Behavior Driven Development framework allows automation of functional validations in easily readable and understandable format to Business Analysts, Developers, Testers, etc.

WebDriver cannot test Mobile applications. WebDriver is a web-based testing tool, therefore applications on the mobile browsers can be tested.
No, captcha and barcode reader cannot be automated.

//Java
Exceptions in Selenium are similar to exceptions in other programming languages.
TimeoutException: This exception is thrown when a command performing an operation does not complete in the stipulated time
NoSuchElementException: This exception is thrown when an element with given attributes is not found on the web page
ElementNotVisibleException: This exception is thrown when the element is present in DOM (Document Object Model), but not visible on the web page
StaleElementException: This exception is thrown when the element is either deleted or no longer attached to the DOM

An exception test is an exception that you expect will be thrown inside a test class. If you have written a test case in such way that it should throw an exception, then you can use the @Test annotation and specify which exception you will be expecting by mentioning it in the parameters. Take a look at the example below: @Test(expectedException = NoSuchElementException.class)

Page Object Model is a design pattern for creating an Object Repository for web UI elements. Each web page in the application is required to have it’s own corresponding page class. The page class is thus responsible for finding the WebElements in that page and then perform operations on those WebElements.

we hold onto those keys and click other buttons to achieve the special functionality. So it is not enough just to specify keys.ALT or keys.SHIFT or keys.CONTROL functions.
scrollTop scrollBottom

//open a new tab in selenium 
driver.findElement(By.cssSelector("body")).sendKeys(Keys.CONTROL +"t");

//resize windows of selelnium 
driver.manage().window().setSize(x, y);
//find broken links on page
2xx – OK
3xx – Redirection
4xx – Resource not found
5xx – Server error

var http = require('http');
var url= driver.findElements(By.tagName("a"));
getAttribute("href");
http.get(url).then(function(response){ return response;})

	
